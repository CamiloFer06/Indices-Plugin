/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Indice
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var Indice = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.fileHeadersMap = /* @__PURE__ */ new Map();
  }
  async onload() {
    this.addCommand({
      id: "crear-indice",
      name: "Crear Indice",
      hotkeys: [{ modifiers: ["Mod"], key: "u" }],
      editorCheckCallback: (checking) => {
        const note = this.app.workspace.getActiveFile();
        if (note && note.parent) {
          if (!checking) {
            this.print(note.parent, note);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "actualizar-indices",
      name: "Actualizar Indices",
      hotkeys: [{ modifiers: ["Mod"], key: "q" }],
      checkCallback: (checking) => {
        const note = this.app.workspace.getActiveFile();
        if (note && note.parent) {
          if (!checking) {
            this.updateIndexNotes(note.parent);
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "actualizar-todo",
      name: "Actualizar Todo",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "u" }],
      callback: async () => {
        await this.updateAll();
        new import_obsidian.Notice("Indices Actualizados");
      }
    });
    this.registerEvent(
      this.app.vault.on("rename", this.handleFileRename.bind(this))
    );
    this.registerEvent(
      this.app.vault.on("create", await this.handleFileCreate.bind(this))
    );
    this.registerEvent(
      this.app.vault.on("modify", this.handleFileModify.bind(this))
    );
  }
  async createIndex(activeFolder, folderLvl, excludeNote) {
    if (folderLvl > 6) {
      return "";
    } else {
      let files = this.app.vault.getMarkdownFiles().filter((file) => file.parent === activeFolder);
      files = files.sort((a, b) => a.name.localeCompare(b.name));
      let index = "";
      if (folderLvl !== 0) {
        index += `${"#".repeat(folderLvl)} ${activeFolder.name}
`;
      }
      for (const file of files) {
        const fileName = file.basename;
        const filePath = file.path.replace(`.${file.extension}`, "");
        const metadata = this.app.metadataCache.getFileCache(file);
        const tags = (metadata == null ? void 0 : metadata.tags) ? metadata.tags.map((tagObj) => tagObj.tag) : [];
        if (file.parent && !tags.includes("#indice") && !(file === excludeNote)) {
          index += `- [[${filePath}|${fileName}]]
`;
          const fileContent = await this.app.vault.cachedRead(file);
          const headings = this.extractHeaders(fileContent);
          if (headings) {
            for (const heading of headings) {
              const match = heading.match(/^#+/);
              const hlevel = match ? match[0].length : -1;
              const line = hlevel < 4 ? `${"	".repeat(hlevel)}- [[${filePath}#${heading.replace(/^#+\s/, "")}|${heading.replace(/^#+\s/, "")}]]
` : "";
              index += line;
            }
          }
        }
      }
      const folders = this.app.vault.getAllFolders(false).filter((folder) => folder.parent === activeFolder);
      for (const folder of folders) {
        index += "\n";
        index += await this.createIndex(folder, folderLvl + 1);
      }
      return index;
    }
  }
  async print(fold, note) {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (view) {
      const editor = view.editor;
      const content = editor.getValue();
      const index = await this.createIndex(fold, 0, note);
      const regex = /(<!-- inicio índice -->)([\s\S]*?)(<!-- fin índice -->)/;
      const match = content.match(regex);
      if (match) {
        const startPos = editor.offsetToPos(match.index + match[1].length);
        const endPos = editor.offsetToPos(match.index + match[0].length - match[3].length);
        const text = `
#indice

${index}
`;
        editor.replaceRange(text, startPos, endPos);
      } else {
        const text = `
<!-- inicio \xEDndice -->
#indice

${index}
<!-- fin \xEDndice -->
`;
        editor.replaceRange(text, editor.getCursor());
      }
    }
  }
  async updateIndexNotes(activeFolder) {
    const indexNotes = this.app.vault.getMarkdownFiles().filter((file) => {
      const metadata = this.app.metadataCache.getFileCache(file);
      const tags = (metadata == null ? void 0 : metadata.tags) ? metadata.tags.map((tagObj) => tagObj.tag) : [];
      if (!file.parent) {
        return false;
      }
      return activeFolder.path.startsWith(file.parent.path) && tags.includes("#indice");
    });
    let i = 0;
    for (const note of indexNotes) {
      if (!note.parent) {
        return;
      }
      const index = await this.createIndex(note.parent, 0);
      const content = await this.app.vault.read(note);
      const regex = /(<!-- inicio índice -->)([\s\S]*?)(<!-- fin índice -->)/;
      const newContent = content.replace(regex, `$1
#indice

${index}
$3`);
      await this.app.vault.modify(note, newContent);
      i += 1;
    }
  }
  //  ======== Maneja el renombrado de archivos. ========
  async handleFileRename(file, oldPath) {
    if (file instanceof import_obsidian.TFile && file.parent) {
      this.updateIndexNotes(file.parent);
      await this.updateHeaderMapForRenamedFile(file, oldPath);
    } else if (file instanceof import_obsidian.TFolder) {
      this.updateIndexNotes(file);
    }
  }
  // Función para actualizar el mapa de encabezados cuando se renombra una nota
  async updateHeaderMapForRenamedFile(file, oldPath) {
    const headers = this.fileHeadersMap.get(oldPath);
    if (headers) {
      this.fileHeadersMap.delete(oldPath);
    }
    const content = await this.app.vault.cachedRead(file);
    const newHeaders = this.extractHeaders(content);
    this.fileHeadersMap.set(file.path, newHeaders);
  }
  // ======== Maneja la creación de archivos ========
  async handleFileCreate(file) {
    if (file instanceof import_obsidian.TFile && file.parent) {
      const content = await this.app.vault.cachedRead(file);
      const headings = this.extractHeaders(content);
      this.fileHeadersMap.set(file.path, headings);
      this.updateIndexNotes(file.parent);
    } else if (file instanceof import_obsidian.TFolder) {
      this.updateIndexNotes(file);
    }
  }
  // ======== Maneja modificaciones de archivos solo si se detectan cambios en encabezados. ========
  async handleFileModify(file) {
    if (file.extension !== "md" || !file.parent)
      return;
    const content = await this.app.vault.cachedRead(file);
    const currentHeaders = this.extractHeaders(content);
    if (!this.fileHeadersMap.has(file.path)) {
      this.fileHeadersMap.set(file.path, currentHeaders);
      this.updateIndexNotes(file.parent);
      return;
    }
    const previousHeaders = this.fileHeadersMap.get(file.path) || [];
    if (this.headersHaveChanged(previousHeaders, currentHeaders)) {
      this.updateIndexNotes(file.parent);
    }
    this.fileHeadersMap.set(file.path, currentHeaders);
  }
  // ======== Extrae encabezados ========
  extractHeaders(content) {
    const headers = content.match(/^#+\s.+$/gm) || [];
    return headers;
  }
  // ======== Compara dos listas de encabezados
  headersHaveChanged(oldHeaders, newHeaders) {
    if (oldHeaders.length !== newHeaders.length)
      return true;
    for (let i = 0; i < oldHeaders.length; i++) {
      if (oldHeaders[i] !== newHeaders[i])
        return true;
    }
    return false;
  }
  async updateAll() {
    const files = this.app.vault.getFiles();
    for (const file of files) {
      this.handleFileModify(file);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
